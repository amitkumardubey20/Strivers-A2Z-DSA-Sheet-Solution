class Solution {
    public ListNode oddEvenList(ListNode head) {
       if(head==null || head.next==null) return head;

       ListNode odd=head;
       ListNode even=head.next;

      ListNode evenHead=head.next;

      while(even!=null && even.next!=null){
          odd.next=odd.next.next;
          even.next=even.next.next;

          odd=odd.next;
          even=even.next;
      }

      odd.next=evenHead;
      return head;
    }
}


First node is odd and second node is even store it in a variable.
Now iterate while even is not null and even's next is not null
    move odd and even with 2 places 
    and update the new odd and even.
and after iteration link odd's last node with even's first node  (store even's first node previously)
and return the head
